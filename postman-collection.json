{
  "info": {
    "name": "Booking API Complete Test Suite",
    "description": "Full automated test suite for Booking API - Saga, Outbox, Idempotency",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1️⃣ Auth Flow",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Response has userId', function () {",
                  "    pm.expect(pm.response.json().data.userId).to.exist;",
                  "});",
                  "pm.environment.set('userId', pm.response.json().data.userId);",
                  "pm.environment.set('email', 'test_' + Date.now() + '@test.com');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Test@123456\",\n  \"fullName\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has accessToken', function () {",
                  "    pm.expect(pm.response.json().data.accessToken).to.exist;",
                  "});",
                  "pm.environment.set('accessToken', pm.response.json().data.accessToken);",
                  "pm.environment.set('refreshToken', pm.response.json().data.refreshToken);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Test@123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            }
          }
        }
      ]
    },
    {
      "name": "2️⃣ Booking CRUD",
      "item": [
        {
          "name": "Create Booking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Response has bookingId', function () {",
                  "    pm.expect(pm.response.json().data.bookingId).to.exist;",
                  "});",
                  "pm.environment.set('bookingId', pm.response.json().data.bookingId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"prop_123\",\n  \"checkIn\": \"2025-11-01\",\n  \"checkOut\": \"2025-11-05\",\n  \"numberOfGuests\": 2,\n  \"totalPrice\": \"1000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          }
        },
        {
          "name": "Get Booking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has booking data', function () {",
                  "    pm.expect(pm.response.json().data).to.have.property('bookingId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          }
        },
        {
          "name": "List Bookings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response is array', function () {",
                  "    pm.expect(pm.response.json().data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "3️⃣ Saga - Cancel Booking (With Compensation)",
      "item": [
        {
          "name": "Cancel Booking - Trigger Saga",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Saga executed successfully', function () {",
                  "    pm.expect(pm.response.json().data.status).to.include('CANCELLED');",
                  "});",
                  "pm.test('Response has saga info', function () {",
                  "    pm.expect(pm.response.json().data).to.have.property('refundAmount');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"User requested cancellation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}", "cancel"]
            }
          }
        },
        {
          "name": "Verify Cancellation - Check Saga Compensation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is CANCELLED', function () {",
                  "    pm.expect(pm.response.json().data.status).to.equal('CANCELLED');",
                  "});",
                  "pm.test('Refund processed', function () {",
                  "    pm.expect(pm.response.json().data.refundAmount).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "4️⃣ Outbox Event System",
      "item": [
        {
          "name": "Get Outbox Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has events array', function () {",
                  "    pm.expect(pm.response.json().data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/outbox?status=SENT&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["outbox"],
              "query": [
                {
                  "key": "status",
                  "value": "SENT"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Check Event Handlers Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/outbox/stats",
              "host": ["{{baseUrl}}"],
              "path": ["outbox", "stats"]
            }
          }
        }
      ]
    },
    {
      "name": "5️⃣ Idempotency Testing",
      "item": [
        {
          "name": "Duplicate Request (Same Idempotency-Key)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('idempotencyKey', 'test-' + Date.now());"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('First request returns 201', function () {",
                  "    pm.expect([201, 200]).to.include(pm.response.code);",
                  "});",
                  "pm.environment.set('firstBookingId', pm.response.json().data.bookingId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"prop_456\",\n  \"checkIn\": \"2025-12-01\",\n  \"checkOut\": \"2025-12-05\",\n  \"numberOfGuests\": 3,\n  \"totalPrice\": \"1500\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          }
        },
        {
          "name": "Verify Idempotency - Same Request Again",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Returns same booking (idempotent)', function () {",
                  "    pm.expect(pm.response.json().data.bookingId).to.equal(pm.environment.get('firstBookingId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"prop_456\",\n  \"checkIn\": \"2025-12-01\",\n  \"checkOut\": \"2025-12-05\",\n  \"numberOfGuests\": 3,\n  \"totalPrice\": \"1500\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          }
        }
      ]
    },
    {
      "name": "6️⃣ Error Scenarios",
      "item": [
        {
          "name": "Cancel Invalid Booking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 or 400', function () {",
                  "    pm.expect([400, 404]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Cancel\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/invalid-id/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "invalid-id", "cancel"]
            }
          }
        },
        {
          "name": "Unauthorized Request (No Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "email",
      "value": "",
      "type": "string"
    }
  ]
}
